# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /nation/happenings/           @controllers.HappeningsController.nationHappenings(nation: String ?= "", start: Integer ?= 0)
POST    /region/parseHappenings/      @controllers.HappeningsController.parseHappenings()
GET     /region/happenings/           @controllers.HappeningsController.regionHappenings(region: String ?= "", start: Integer ?= 0)
GET     /flag/                        @controllers.FlagController.nationFlags(nation: String ?= "")
GET     /regionflag/                  @controllers.FlagController.regionFlags(region: String ?= "")

GET     /rmb/comments/exist           @controllers.RMBController.hasComments(rmbPost: Integer ?= -1)
GET     /rmb/comments/                @controllers.RMBController.getComments(rmbPost: Integer ?= -1)
POST    /rmb/comments/flag            @controllers.RMBController.flagComment(commentId: Integer ?= -1, flag: Boolean ?= false)
POST    /rmb/comments/like            @controllers.RMBController.likeComment(commentId: Integer ?= -1, like: Boolean ?= false)
POST    /rmb/comments/add             @controllers.RMBController.addComment(rmbPost: Integer ?= -1)
POST    /rmb/rate/set/                @controllers.RMBController.ratePost(rmbPost: Integer ?= -1, rating: Integer ?= -1)
GET     /rmb/rate/get/                @controllers.RMBController.getPostRatings(rmbPost: Integer ?= -1, rmbCache: Integer ?= -1)
GET     /rmb/cache/                   @controllers.RMBController.getRMBCache(region: String ?= "")

GET    /flag/nation/                  @controllers.FlagController.redirectToNationFlag(nation: String ?= "")
GET    /flag/region/                  @controllers.FlagController.redirectToRegionFlag(region: String ?= "")

GET     /newspaper/details/           @controllers.NewspaperController.getNewspaperDetails(id: Integer ?= 0)
GET     /newspaper/latest/            @controllers.NewspaperController.findLatestUpdate(id: Integer ?= 0)
GET     /newspaper/region/            @controllers.NewspaperController.findNewspaper(region: String ?= "")
GET     /newspaper/lookup/            @controllers.NewspaperController.getNewspaper(id: Integer ?= -1, visible: Integer ?= 1, hideBody: Boolean ?= false, lookupArticleId: Integer ?= -1)
POST    /newspaper/editors/           @controllers.NewspaperController.changeEditors(newspaper: Integer ?= 0)
POST    /newspaper/canedit/           @controllers.NewspaperController.canEdit(newspaper: Integer ?= 0)
GET     /newspaper/editor/            @controllers.NewspaperController.isEditor(newspaper: Integer ?= 0, nation: String ?= "")
POST    /newspaper/submit/            @controllers.NewspaperController.submitArticle(newspaper: Integer ?= 0, articleId: Integer ?= -1)
POST    /newspaper/administrate/      @controllers.NewspaperController.administrateNewspaper(newspaper: Integer ?= 0)
POST    /newspaper/found/             @controllers.NewspaperController.foundNewspaper(region: String ?= "")
POST    /newspaper/disband/           @controllers.NewspaperController.disbandNewspaper(region: String ?= "")
GET     /newspaper/recent/            @controllers.NewspaperController.getLatestArticles(start: Integer ?= 0)

GET     /autocomplete/nation/         @controllers.AutocompleteController.autocompleteNation(start: String ?= "")
GET     /nation/title/                @controllers.AutocompleteController.getFullName(name: String ?= "")
GET     /nation/name/                 @controllers.AutocompleteController.getTitle(name: String ?= "")

GET     /nation/latest_update/        @controllers.NationController.getLastSettingsUpdate(name: String ?= "")
GET     /nation/settings/             @controllers.NationController.retrieveSettings(name: String ?= "")
POST    /nation/settings/             @controllers.NationController.updateSettings()
GET     /nation/settings/forum        @controllers.NationController.retrieveForumSettings(name: String ?= "")
POST    /nation/settings/all          @controllers.NationController.retrieveAllSettings(name: String ?= "")

POST    /nation/data/get/             @controllers.NationController.retrieveData()
POST    /nation/data/set/             @controllers.NationController.updateData()
GET     /nation/data/                 @controllers.NationController.getLastDataUpdate(name: String ?= "")
POST    /nation/auth/                 @controllers.NationController.getAuthCode()

GET     /nation/endorsements/         @controllers.WorldAssemblyController.getEndorsements(name: String ?= "", fullData: Boolean ?= false)
GET     /nation/unreturnedendo/       @controllers.WorldAssemblyController.getUnreturnedEndorsements(name: String ?= "", fullData: Boolean ?= false)
GET     /nation/missingendo/          @controllers.WorldAssemblyController.getMissingEndorsements(name: String ?= "", fullData: Boolean ?= false)

GET     /region/wa/                   @controllers.WorldAssemblyController.getWAMembers(region: String ?= "")
GET     /region/population/           @controllers.RegionController.getPopulationTrends(region: String ?= "")
GET     /region/updatetime/           @controllers.RegionController.getUpdateTime(region: String ?= "", std: Double ?= 1.35)
GET     /region/nations/              @controllers.RegionController.getNations(region: String ?= "", xml: Boolean ?= false)
GET     /region/map/                  @controllers.RegionController.getRegionalMap(region: String ?= "")
POST    /region/map/                  @controllers.RegionController.setRegionalMap(region: String ?= "", disband: Boolean ?= false)
GET     /region/title/                @controllers.RegionController.getRegionalTitles(region: String ?= "")
POST    /region/title/                @controllers.RegionController.setRegionalTitle(region: String ?= "", disband: Boolean ?= false)
GET     /region/summary/              @controllers.RegionController.getRegionSummary(region: String ?= "")
GET     /region/embassies/            @controllers.RegionController.getEmbassies(region: String ?= "")
GET     /region/irc/                  @controllers.IRCController.getIRCNetwork(region: String ?= "")
POST    /region/irc/                  @controllers.IRCController.setIRCNetwork(region: String ?= "", deleteIRC: Boolean ?= false)

GET     /recruitment/                 @controllers.RecruitmentController.getRecruitmentNations()
GET     /recruitment/puppet/          @controllers.RecruitmentController.markPuppetNation(nation: String ?= "")
GET     /recruitment/officers/get     @controllers.RecruitmentController.getRecruitmentOfficers(region: String ?= "", includeAdmins: Boolean ?= false)
POST    /recruitment/officers/set     @controllers.RecruitmentController.changeOfficers(region: String ?= "")
POST    /recruitment/campaign/        @controllers.RecruitmentController.getRecruitmentCampaigns(region: String ?= "", includeStats: Boolean ?= false)
POST    /recruitment/campaign/create  @controllers.RecruitmentController.createRecruitmentCampaign(region: String ?= "")
POST    /recruitment/campaign/retire  @controllers.RecruitmentController.retireRecruitmentCampaign(region: String ?= "", id: Integer ?= -1)
POST    /recruitment/campaign/delete  @controllers.RecruitmentController.hideRecruitmentCampaign(region: String ?= "", id: Integer ?= -1)
POST    /recruitment/target/get       @controllers.RecruitmentController.findRecruitmentTarget(region: String ?= "", accessKey: String ?= "", userAgentFix: Boolean ?= false)
POST    /recruitment/target/confirm   @controllers.RecruitmentController.confirmRecruitmentSent(region: String ?= "", target: String ?= "", accessKey: String ?= "")

GET     /wa/delegates/                @controllers.WorldAssemblyController.getWADelegates()
GET     /wa/power_transfers/          @controllers.WorldAssemblyController.getRecentPowerTransfers()
GET     /wa/nation_votes/             @controllers.WorldAssemblyController.getIndividualWAVotes()
GET     /wa/resolution_votes/         @controllers.WorldAssemblyController.getWorldAssemblyResolutionVotingStats()

POST   /xenforo/login/                @controllers.XenforoController.verifyNationLogin()
POST   /xenforo/register/             @controllers.XenforoController.createXenforoUser()

POST   /nswiki/login/                 @controllers.NSWikiController.verifyNationLogin()

GET    /ws/                           @controllers.WebSocketController.index(nation: String ?= "", userRegion: String ?= "", reconnect: Boolean ?= false)
GET    /ws/region/                    @controllers.WebSocketController.region(nation: String ?= "", userRegion: String ?= "", region: String ?= "", reconnect: Boolean ?= false)
GET    /ws/nation/                    @controllers.WebSocketController.nation(nation: String ?= "", userRegion: String ?= "", visibleNation: String ?= "", reconnect: Boolean ?= false)
GET    /ws/recruitmentAdmin/          @controllers.WebSocketController.recruitmentAdmin(nation: String ?= "", userRegion: String ?= "", adminRegion: String ?= "", reconnect: Boolean ?= false)